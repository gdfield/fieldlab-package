classdef Rat < fieldlab.sources.Subject
    
    methods
        
        function obj = Rat()
            import symphonyui.core.*;
            import edu.washington.*;
            
            obj.addProperty('genotype', {}, ...
                'type', PropertyType('cellstr', 'row', {'Long-Evans', 'Sprague-Dawley', 'RCS'}), ... 
                'description', 'Genetic strain');
            obj.addProperty('injection-1', {}, ...
                'type', PropertyType('cellstr', 'row', {'NA', 'intraocular', 'subretinal', 'SC', 'dLGN'}), ...
                'description', 'location of first injection');
            obj.addProperty('injection-2', {}, ...
                'type', PropertyType('cellstr', 'row', {'NA', 'intraocular', 'subretinal', 'SC', 'dLGN'}), ...
                'description', 'localtion of second injection');
            
%             photoreceptors = containers.Map();
%             photoreceptors('mCone') = struct( ...
%                 'collectingArea', 0.20, ...
%                 'spectrum', importdata(riekelab.Package.getCalibrationResource('photoreceptors', 'mouse', 'm_cone_spectrum.txt')));
%             photoreceptors('rod') = struct( ...
%                 'collectingArea', 0.50, ...
%                 'spectrum', importdata(riekelab.Package.getCalibrationResource('photoreceptors', 'mouse', 'rod_spectrum.txt')));
%             photoreceptors('sCone') = struct( ...
%                 'collectingArea', 0.20, ...
%                 'spectrum', importdata(riekelab.Package.getCalibrationResource('photoreceptors', 'mouse', 's_cone_spectrum.txt')));
%             obj.addResource('photoreceptors', photoreceptors);
            
            obj.addAllowableParentType([]);
        end
        
    end
    
end

